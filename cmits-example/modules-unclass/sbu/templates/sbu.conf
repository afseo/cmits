##
## SSL Virtual Host Context
##

<VirtualHost _default_:443>

DocumentRoot "/var/www/html"
ServerName <%=@fqdn%>
ServerAdmin <%=@server_admin_email%>

Include common/nss-site-common.conf
Include common/nss-site-cac.conf

#   The nickname of the RSA server certificate you are going to use.
NSSNickname <%=@cert_nickname-%>
<% if @mode != 'production' %>
NSSEnforceValidCerts off
<% end %>

#   The NSS security database directory that holds the certs and keys
NSSCertificateDatabase /etc/pki/mod_nss



#########################
# Authentication defaults
#########################
<Location />
	<IfModule mod_auth_pgsql.c>
		Auth_PG_database auth
		Auth_PG_user sbu_mod_auth_pgsql
		Auth_PG_pwd_table cert_users
			Auth_PG_uid_field user_name
			Auth_PG_pwd_field user_passwd
		Auth_PG_grp_table cert_groups
			Auth_PG_grp_user_field  user_name
			Auth_PG_grp_group_field group_name
		Auth_PG_hash_type MD5

		# No real passwords are stored in the database: the views
		# provide 'password' as the password, as required by
		# FakeBasicAuth
		Auth_PG_encrypted off
		#Auth_PG_log_table log
		#Auth_PG_log_uname_field uname
		#Auth_PG_log_date_field date
		#Auth_PG_log_uri_field uri
		#Auth_PG_log_pwd_field password

		Auth_PG_Authoritative on
	</IfModule>

	AuthType Basic
        # Anyone who sees a username/password prompt has already been rejected.
        # Try to funnel them to the fine 401 page that's been written.
        AuthName ">>> ACCESS DENIED; click cancel for help <<<"
</Location>

<Directory /var/www/html>
	Require valid-user
        # Do not show auto-indexes where index.html does not exist.
        Options -Indexes
</Directory>

<Location "/favicon.png">
    Satisfy Any
</Location>
<Location "/favicon.ico">
    Satisfy Any
</Location>
<Location "/robots.txt">
    Satisfy Any
</Location>

# Some people may have ancient bookmarks for the signup page.
Redirect permanent /cert/WelcomePage/welcome.htm https://<%=web_fqdn-%>/


##############################
# When authentication fails...
##############################
ErrorDocument 401 /pages/401.html
# Let unauthenticated users actually get that file
<Location /pages/401.html>
	Satisfy Any
</Location>

<Files ~ "\.(cgi|shtml|phtml|php3?)$">
    NSSOptions +StdEnvVars
</Files>

ScriptAlias /cgi-bin/ /var/www/cgi-bin/
<Directory "/var/www/cgi-bin">
    SetEnv PYTHON_EGG_CACHE "/tmp"
    NSSOptions +StdEnvVars +FakeBasicAuth
</Directory>

CustomLog logs/ssl_request_log \
          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

CustomLog logs/ssl_activity_log \
	  "%{%s}t:%>s:%u"

#########
#########
#########                        web applications
#########
#########

Alias /authapp/ /var/www/sbu-apps/authapp/public/
Alias /request/ /var/www/sbu-apps/authapp/public/go.py/request/
Alias /upload/ /var/www/sbu-apps/upload/public/
Alias /authapp-static/ /var/www/sbu-apps/authapp/static/
Alias /upload-static/ /var/www/sbu-apps/upload/static/

<Directory /var/www/sbu-apps/*/public>
	NSSOptions +StdEnvVars

# stock mod_python uses python 2.3, which we can't anymore..
#	SetHandler mod_python
#	PythonHandler quixote.server.mod_python_handler
#	PythonOption quixote-publisher-factory go.create_publisher
#	PythonDebug On
#	PythonPath "sys.path + ['/var/www/apps']"
#	PythonEnablePdb on
	Options +ExecCGI
	AddHandler cgi-script .py
        SetEnv PYTHON_EGG_CACHE "/tmp"
	Order allow,deny
	Allow from all
</Directory>
<Directory /var/www/sbu-apps/*/static>
	SetHandler None
	Order allow,deny
	Allow from all
</Directory>

<Location /authapp>
	Require valid-user
	SetEnv PYTHONPATH "/var/www/sbu-apps/authapp"
	Order allow,deny
	Allow from all
</Location>
<Location /authapp/go.py/agree>
	# This message will only be shown if a username and password box is
	# shown; and that will only happen if the user's certificate DN is not
	# found in the cert_users_needing_to_agree table. This in turn is
	# either because the user has agreed to the present AUP (no further
	# need to agree at this time), or because the user is disabled,
	# expired, or otherwise unable to log in for a non-AUP-related problem.
	#
	# Unfortunately, that whole message may not be shown by the browser in
	# the username and password dialog box. So we settle for something more
	# terse.
	AuthName "AUP agreement page access denied. Talk to <%=@server_admin_email-%>."
	<IfModule mod_auth_pgsql.c>
		Auth_PG_database auth
		Auth_PG_user sbu_mod_auth_pgsql
		#                 vvvvvvvvvvvvvvvvvvvvvvvvvvv
		Auth_PG_pwd_table cert_users_needing_to_agree
		#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
			Auth_PG_uid_field user_name
			Auth_PG_pwd_field user_passwd
		Auth_PG_grp_table cert_groups
			Auth_PG_grp_user_field  user_name
			Auth_PG_grp_group_field group_name
		Auth_PG_hash_type MD5

		# No real passwords are stored in the database: the views
		# provide 'password' as the password, as required by
		# FakeBasicAuth
		Auth_PG_encrypted off
		#Auth_PG_log_table log
		#Auth_PG_log_uname_field uname
		#Auth_PG_log_date_field date
		#Auth_PG_log_uri_field uri
		#Auth_PG_log_pwd_field password

		Auth_PG_Authoritative on
	</IfModule>

        Require valid-user
</Location>

 
<Location /request>
    SetEnv PYTHONPATH "/var/www/sbu-apps/authapp"
    # Let anyone in: to connect they must have provided a certificate; if they
    # are using /request, we are not yet familiar with that certificate.
    Satisfy any
    Order allow,deny
    Allow from all
</Location>
<Location /authapp-static>
	Order allow,deny
	Allow from all
</Location>

<Directory /var/www/sbu-apps/authapp/public>
        Require valid-user
        SetEnv PYTHONPATH "/var/www/sbu-apps/authapp"
	Order allow,deny
	Allow from all
</Directory>

<Directory /var/www/sbu-apps/upload/public>
	Require valid-user
        SetEnv PYTHONPATH "/var/www/sbu-apps/upload"
	Order allow,deny
	Allow from all
</Directory>
 
	

#######
#######
#######
#######     Miscellaneous permissions
#######
#######
#######


# Disallow access to .svn dirs in the main website.
<DirectoryMatch "^/var/www/html.*\.svn">
	Order deny,allow
	Deny from all
</DirectoryMatch>





#######
#######
#######
#######                  SBU per-directory permissions
#######
#######
#######

<Directory /var/www/html>
	<IfModule mod_auth_pgsql.c>
		Auth_PG_database auth
		Auth_PG_user sbu_mod_auth_pgsql
		Auth_PG_pwd_table cert_users
			Auth_PG_uid_field user_name
			Auth_PG_pwd_field user_passwd
		Auth_PG_grp_table cert_groups
			Auth_PG_grp_user_field  user_name
			Auth_PG_grp_group_field group_name
		Auth_PG_hash_type MD5

		#Auth_PG_log_table log
		#Auth_PG_log_uname_field uname
		#Auth_PG_log_date_field date
		#Auth_PG_log_uri_field uri
		#Auth_PG_log_pwd_field password

		# mod_auth_pgsql must be consulted first (after SSL
		# verification, anyway); it falls through to other modules by
		# being non-authoritative
		Auth_PG_Authoritative on
	</IfModule>
</Directory>

#######
#######
#######
#######     Trac
#######
#######
#######

######################
# Subversion via https
######################

# There wasn't a <Python> :(
<Perl>
#!/usr/bin/perl

#####
##### Create a <Location> directive for each Subversion repository
##### named, for example, foo, that limits access to the svn-foo
##### group
#####

# Directory where svn repositories are, in the filesystem
my $svn_dir       = "/var/www/svn";
# Location under which they will appear, at the end of the URL
my $svn_location  = "/svn";

opendir(SVN_ROOT, $svn_dir) or die "Couldn't open Subversion root directory ($svn_dir)";

while (my $name = readdir(SVN_ROOT)) {
	# entirely alphanumeric? (i.e. not . or ..)
	if($name =~ /^[[:alnum:]_]+$/) {
		# Create a <Location> directive
		$Location{"$svn_location/$name"} = {
			# This is what goes in the <Location> directive
			AuthType => "Basic",
			Require => "group svn-readonly-$name svn-$name",
# http://svnbook.red-bean.com/en/1.0/ch06s04.html#svn-ch-6-sect-4.4.1
			LimitExcept => {
			    "GET PROPFIND OPTIONS REPORT" => {
			        Require  => "group svn-$name",
			    },
			},
			DAV      => "svn",
			SVNPath  => "$svn_dir/$name",
                        # apply XSLT style that adds classification bar
                        SVNIndexXSLT => "/styles/svnindex.xsl",
                        # allow Web Folder writes to be commits
                        SVNAutoversioning => "On"
		};
	}
}

closedir(SVN_ROOT);
__END__
</Perl>

<Location /svn>
	Options -Indexes
        # Let users do other HTTP verbs in this location, contravening the
        # global default in ../conf/httpd.conf
        <LimitExcept GET POST OPTIONS>
            Allow from all
        </LimitExcept>
</Location>



###############
# Trac
###############

# static things like pictures and CSS
Alias /trac/ /var/www/trac-shared/htdocs/common/
<Directory /var/www/trac-shared/>
	# the trac htdocs are not a secret.
	Satisfy any
	Options -Indexes +MultiViews
	AllowOverride None
	Order allow,deny
	Allow from all
</Directory>
<Directory /var/www/wsgi-bin>
	Order allow,deny
	Allow from all
</Directory>
	


<Perl>
#!/usr/bin/perl

## Create a <Location> directive for each Trac site
## named, for example, foo, that limits access to the trac-foo
## group

# Heavily adapted from
# http://projects.edgewall.com/trac/wiki/TracMultipleProjects?version=69
# Directory where trac configurations are, in the filesystem
my $trac_dir       = "/var/www/tracs";
# Location under which the projects will appear, at the end of the URL
my $trac_location  = "/projects";

opendir(TRAC_ROOT, $trac_dir) or die "Couldn't open Trac root directory ($trac_dir)";

while (my $name = readdir(TRAC_ROOT)) {
	# entirely alphanumeric? (i.e. not . or ..)
	if($name =~ /^[[:alnum:]_]+$/) {
		push @WSGIScriptAlias,
			["$trac_location/$name", 
			"/var/www/wsgi-bin/trac.wsgi"];
		# Create a <Location> directive
		$Location{"$trac_location/$name"} = {
			# This is what goes in the <Location> directive
			AuthType => "Basic",
			# require group svn-$name. same as the svn repos
			Require  => "group trac-$name",
			SetEnv => ["trac.env_path", "/var/www/tracs/$name"],
			# http://code.google.com/p/modwsgi/wiki/IntegrationWithTrac
			# look in page for this string: 'the case of hosting
			# multiple sites'
			WSGIApplicationGroup => "%{GLOBAL}"
		};
	}
}
closedir(TRAC_ROOT);
__END__
</Perl>



#######
#######
#######
#######     Static pages
#######
#######
#######






<Directory /var/www/html/pages>
	AuthType Basic
	Require valid-user
</Directory>

<Directory /var/www/html/styles>
	Satisfy any
</Directory>
<Directory /var/www/html/images>
	Satisfy any
</Directory>
<Directory /var/www/html/scripts>
	Satisfy any
</Directory>

<Directory /var/www/html/Data>
	AuthType Basic
	Require group admins
        # Show auto-indexes
        Options +Indexes
        # We don't want uploaders hijacking a dir by uploading index.html.
        # But there doesn't seem to be a way to have no DirectoryIndex at all.
        # So we'll just set it to something obscure.
	DirectoryIndex c0c751fb-200b-4b74-bbc1-b64431ca256741c68bf1-bbd7-4536-84b0-0f96246db932b6a3c593-2d8f-43c8-a9e6-fa85680512a828a0ecb0-4202-4201-813d-3d8540d469e6
        HeaderName /pages/files_header.html
        # Make no files special in Data
        # especially, execute nothing!
	Options -ExecCGI
	# do NOT execute Incoming PHP pages
        <IfModule mod_php4.c>
            php_flag engine off
        </IfModule>
</Directory>


Include conf.d/Data.perms

</VirtualHost>
